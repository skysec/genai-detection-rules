rules:
  - id: detect-memory-haystack
    languages:
      - python
    severity: INFO
    message: "Detected Haystack memory usage: Conversation memory, chat history, or context retention patterns"
    pattern-either:
      # Memory component imports - HIGH CONFIDENCE
      - pattern: from haystack.components.converters import ConversationSummarizer
      - pattern: from haystack.components.others import Multiplexer
      - pattern: from haystack.dataclasses import ChatMessage

      # Custom memory class definitions with Haystack patterns - HIGH CONFIDENCE
      - pattern: |
          class ConversationMemory:
              def __init__(self):
                  self.history = []

      # Haystack-specific memory patterns - VERY HIGH CONFIDENCE
      - pattern: |
          def add_exchange(self, query: str, response: str):
              ...
      - pattern: |
          def get_context(self, max_turns: int = $N) -> str:
              ...

      # ChatMessage usage - HIGH CONFIDENCE
      - pattern: ChatMessage.from_user($TEXT)
      - pattern: ChatMessage.from_assistant($TEXT)
      - pattern: ChatMessage.from_system($TEXT)
      - pattern: $MESSAGES.append(ChatMessage.from_user($TEXT))
      - pattern: $MESSAGES.append(ChatMessage.from_assistant($TEXT))

      # Memory storage patterns specific to conversation
      - pattern: self.conversation_history = []
      - pattern: conversation_history = []

      # Context management patterns
      - pattern: recent_history = $LIST[-$N:]
      - pattern: self.history[-$N:]

      # Memory initialization
      - pattern: memory = ConversationMemory()
      - pattern: conversation_memory = $CLASS()

    metadata:
      references:
        - https://docs.haystack.deepset.ai/docs/chat-agents
        - https://docs.haystack.deepset.ai/docs/conversational-search
      category: maintainability
      technology:
        - genAI
        - LLMs
        - memory
        - conversation
        - chat-history
      confidence: HIGH
      subcategory:
        - memory