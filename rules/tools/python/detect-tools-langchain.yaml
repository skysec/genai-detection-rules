rules:
  - id: detect-tools-langchain
    languages:
      - python
    severity: INFO
    message: "Detected LangChain tools usage: Custom tools, function calling, or tool execution patterns"
    pattern-either:
      # Specific tool imports
      - pattern: from langchain.tools import BaseTool
      - pattern: from langchain.tools import $TOOL
      - pattern: import langchain.tools
      # Agent imports with tools
      - pattern: from langchain.agents import initialize_agent
      - pattern: from langchain.agents import AgentType
      - pattern: from langchain.agents import $AGENT
      # Tool class definitions
      - pattern: |
          class $CLASS(BaseTool):
              ...
      # Agent initialization patterns
      - pattern: initialize_agent(tools=$TOOLS, ...)
      - pattern: initialize_agent(..., tools=$TOOLS, ...)
      - pattern: $AGENT = initialize_agent(...)
      # Tool method implementations - VERY HIGH CONFIDENCE
      - pattern: |
          class $CLASS(BaseTool):
              def _run(self, $ARGS) -> str:
                  ...
      - pattern: |
          class $CLASS(BaseTool):
              async def _arun(self, $ARGS) -> str:
                  ...

      # LangChain specific tool patterns - HIGH CONFIDENCE
      - pattern: tools=[$TOOLS]
      - pattern: |
          $AGENT = initialize_agent(
              tools=$TOOLS,
              llm=$LLM
          )
      # Tool usage in initialized agents only
      - pattern: |
          $AGENT = initialize_agent(...)
          ...
          $AGENT.tools.append($TOOL)
    metadata:
      references:
        - https://python.langchain.com/docs/how_to/custom_tools
        - https://python.langchain.com/docs/tutorials/agents
      category: maintainability
      technology:
        - genAI
        - LLMs
        - tools
        - function-calling
      confidence: HIGH
      subcategory:
        - tools