rules:
  - id: detect-tools-langchain-typescript
    languages:
      - typescript
      - javascript
    severity: INFO
    message: "Detected LangChain tools usage: Custom tools, function calling, or tool execution patterns"
    pattern-either:
      # Core LangChain tools imports - VERY HIGH CONFIDENCE
      - pattern: import { BaseTool } from "@langchain/core/tools"
      - pattern: import { DynamicTool } from "@langchain/core/tools"
      - pattern: import { Tool } from "@langchain/core/tools"
      - pattern: import { StructuredTool } from "@langchain/core/tools"
      # Agent imports with tools
      - pattern: import { AgentExecutor } from "langchain/agents"
      - pattern: import { initializeAgentExecutorWithOptions } from "langchain/agents"
      - pattern: import { createReactAgent } from "langchain/agents"
      # Specific tool imports
      - pattern: import { Calculator } from "@langchain/community/tools/calculator"
      - pattern: import { WebBrowser } from "langchain/tools/webbrowser"
      - pattern: import { SerpAPI } from "@langchain/community/tools/serpapi"
      - pattern: import { $TOOL } from "@langchain/community/tools/$PATH"
      - pattern: import { $TOOL } from "langchain/tools/$PATH"

      # Tool class definitions - VERY HIGH CONFIDENCE
      - pattern: |
          class $CLASS extends BaseTool {
              ...
              async _call($INPUT: string): Promise<string> {
                  ...
              }
          }
      - pattern: |
          class $CLASS extends Tool {
              ...
              async _call($INPUT: string): Promise<string> {
                  ...
              }
          }
      - pattern: |
          class $CLASS extends StructuredTool {
              ...
          }

      # Agent initialization patterns - HIGH CONFIDENCE
      - pattern: |
          const $AGENT = await initializeAgentExecutorWithOptions(
              $TOOLS,
              $LLM,
              ...
          )
      - pattern: initializeAgentExecutorWithOptions($TOOLS, $LLM, ...)

      # LangChain specific tool patterns - HIGH CONFIDENCE
      - pattern: |
          new DynamicTool({
              name: $NAME,
              description: $DESC,
              func: async ($INPUT: string) => {
                  ...
              }
          })
      - pattern: |
          const $TOOL = new DynamicTool({
              ...
          })
    metadata:
      references:
        - https://js.langchain.com/docs/modules/agents/tools/
        - https://js.langchain.com/docs/modules/agents/tools/custom_tools
      category: maintainability
      technology:
        - genAI
        - LLMs
        - tools
        - function-calling
        - typescript
        - javascript
      confidence: HIGH
      subcategory:
        - tools