rules:
  - id: detect-tools-langchain-typescript
    languages:
      - typescript
      - javascript
    severity: INFO
    message: "Detected LangChain tools usage: Custom tools, function calling, or tool execution patterns"
    pattern-either:
      # Tool imports
      - pattern: import { Tool } from "@langchain/core/tools"
      - pattern: import { $TOOL } from "@langchain/core/tools"
      - pattern: import { DynamicTool } from "@langchain/core/tools"
      - pattern: import { StructuredTool } from "@langchain/core/tools"
      # Agent imports
      - pattern: import { initializeAgentExecutorWithOptions } from "langchain/agents"
      - pattern: import { AgentExecutor } from "langchain/agents"
      - pattern: import { $AGENT } from "langchain/agents"
      # Tool class definitions
      - pattern: |
          class $CLASS extends Tool {
              ...
          }
      - pattern: |
          class $CLASS extends StructuredTool {
              ...
          }
      # Tool creation patterns
      - pattern: |
          const $TOOL = new DynamicTool({
              name: $NAME,
              description: $DESC,
              func: $FUNC,
              ...
          })
      - pattern: |
          new DynamicTool({
              ...
          })
      # Agent initialization with tools
      - pattern: |
          const $AGENT = await initializeAgentExecutorWithOptions(
              $TOOLS,
              ...
          )
      - pattern: initializeAgentExecutorWithOptions($TOOLS, ...)
      # Tool execution patterns
      - pattern: '$AGENT.call({ input: $INPUT })'
      - pattern: '$AGENT.invoke({ input: $INPUT })'
      - pattern: $TOOL.call($INPUT)
      - pattern: $TOOL.invoke($INPUT)
      # Tool method implementations
      - pattern: |
          async _call($INPUT: string): Promise<string> {
              ...
          }
      - pattern: |
          _call($INPUT: string): Promise<string> {
              ...
          }
      # Tool arrays and registration
      - pattern: const tools = [$TOOLS]
      - pattern: tools.push($TOOL)
      - pattern: $AGENT.tools.push($TOOL)
      # Function calling patterns
      - pattern: $OBJ.registerFunction($FUNC)
      - pattern: $VAR.registerFunction(...)
    metadata:
      references:
        - https://js.langchain.com/docs/modules/agents/tools/
        - https://js.langchain.com/docs/modules/agents/tools/custom_tools
      category: maintainability
      technology:
        - genAI
        - LLMs
        - tools
        - function-calling
        - typescript
        - javascript
      confidence: MEDIUM
      subcategory:
        - tools